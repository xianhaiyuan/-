/*
题目描述：
    在某个字符串（长度不超过100）中有左括号、右括号和大小写字母：规定（与常见的算数式子一样）任何一个左括号都从内到外与它右边且距离最近的右括号匹配。
    写一个程序，找到无法匹配的左括号，输出原来字符串，并在下一行标出不能匹配的括号。不能匹配的左括号用"$"标注，不能匹配的右括号用"?"标注。
输入：
    输入包括多组数据，每组数据一行，包含一个字符串，只包含左右括号和大小写字母，字符串长度不超过100.
输出：
    对每组输出数据，输出两行，第一行包含原始输入字符，第二行由"$"，"?"和空格组成，"$"和"?"表示与之对应的左括号和右括号不能匹配
样例输入：
    )(rttyy())sss)(
样例输出：
    )(rttyy())sss)(
    ?            ?$ 
*/
#include<stdio.h>
#include<stdlib.h>
#include<stack>
using namespace std;
stack<int> S;  //定义一个堆栈 
char str[110];  //保存输入字符 
char ans[110];  //保存输出字符 
int main(){
    while(scanf("%s",str)!=EOF)
    {
        int i;
        for(i=0;str[i]!=0;i++)  //从左到右遍历字符串 
        {
            if(str[i]=='(')  //若遇到左括号 
            {
                S.push(i);  //将其数组下标放入堆栈中 
                ans[i]=' ';  //暂且将第二行该输出字符串位置改为空格 
            }
            else if(str[i]==')')  //若遇到右括号 
            {
                if(S.empty()==false)  //若此时堆栈非空 
                {
                    S.pop();  //栈顶弹出能匹配的左括号 
                    ans[i]=' ';  //第二行该输出字符串位置为空格 
                }
                else ans[i] = '?';  //若堆栈为空，则无法找到左括号与其匹配，第二行该输出位置为"?" 
            }
            else ans[i] = ' ';  //若为其他字符，与括号匹配无关，第二行该输出位置为空格 
        }
        while(!S.empty())  //当字符串遍历完成后，尚留在堆栈中的左括号无法匹配 
        {
            ans[S.top()] = '$';  //修改其第二行的输出位置为"$" 
            S.pop();  //弹出去 
        }
        ans[i]=0;  //为了使输出形成字符串，在其最后一个字符后添加一个空字符串，方便puts用 
        puts(str);  //输出原字符串 
        puts(ans);  //输出答案字符串 
    }    
    system("pause");
    return 0;

}